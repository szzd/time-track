{"version":3,"sources":["components/TaskInput.jsx","components/TaskList.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskImput","props","state","title","startTime","endTime","btnTxt","btnClass","duration","intervalId","e","this","setState","target","value","Date","clearTime","addSeconds","toString","clearInterval","onTaskadded","setInterval","formattedDuration","toISOString","substr","className","type","placeholder","onChange","taskInputChange","onClick","startTaskHandle","Component","TaskList","tasks","s","push","id","length","getHours","getMinutes","getSeconds","map","task","key","scope","Fragment","TaskInput","p","taskAdded","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da3c1d03.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass TaskImput extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            title       : '',\n            startTime   : '',\n            endTime     : '',\n            btnTxt      : 'Start Task',\n            btnClass    : 'primary',\n            duration    : 0,\n            intervalId  : ''\n        }\n\n    }\n\n    taskInputChange(e){\n        this.setState({\n            title : e.target.value\n        })\n    }\n\n    timerFormat(){\n        return (new Date()).clearTime().addSeconds(this.state.duration).toString('H:mm:ss');\n    }\n\n\n\n    startTaskHandle(e) {\n\n        \n\n\n        if (!this.state.startTime) {\n\n            let intervalId = setInterval(() => {\n                this.setState({\n                    duration : (this.state.duration + 1)\n                });\n    \n            }, 1000);\n\n\n            this.setState({\n                startTime: new Date(),\n                btnTxt : 'Stop Task',\n                btnClass    : 'danger',\n                intervalId : intervalId\n            })\n\n\n        }else{\n\n            clearInterval(this.state.intervalId);\n\n            this.setState({\n                startTime: '',\n                btnTxt : 'Start Task',\n                btnClass    : 'primary',\n                duration: 0,\n                title: ''\n            })\n\n            this.props.onTaskadded({\n                title   : this.state.title,\n                startTime: this.state.startTime,\n                endTime: new Date()\n            });\n        }\n    }\n\n    render() {\n        let formattedDuration = new Date(this.state.duration * 1000).toISOString().substr(11, 8);\n        return (\n            <div className=\"row p-4\">\n                <input type=\"text\" \n                className=\"col-8 form-control\" \n                placeholder=\"Type your task name\"\n                onChange={(e) => this.taskInputChange(e)} \n                value={this.state.title}/>\n\n                <div className=\"col-4 row\">\n                    <div className=\"col d-flex justify-content-center align-items-center\">\n                         { formattedDuration }\n                    </div>\n                    <button className={`col btn btn-${this.state.btnClass}`} type=\"button\" onClick={() => this.startTaskHandle()}>\n                        { this.state.btnTxt }\n                    </button>\n                </div>\n            </div>\n      );\n    }\n}\n \nexport default TaskImput;","import React, { Component } from 'react';\nimport TaskInput from './TaskInput'\n\nclass TaskList extends Component {\n\n    state = {\n        tasks : []\n    }\n\n    taskAdded(s) {\n\n        let { tasks } = this.state;\n        let duration = new Date(s.endTime - s.startTime).toISOString().substr(11, 8);\n\n        tasks.push({\n            id: (tasks.length + 1),\n            title : s.title,\n            startTime: s.startTime.getHours()+':'+s.startTime.getMinutes()+':'+s.startTime.getSeconds(),\n            endTime: s.endTime.getHours()+':'+s.endTime.getMinutes()+':'+s.endTime.getSeconds(),\n            duration: duration\n        }); \n        this.setState({tasks});\n    }\n    \n    render() {\n\n        let tasks = this.state.tasks.map(task =>\n            <tr key={task.id}>\n                <th scope=\"row\">{task.id}</th>\n                <td>{task.title}</td>\n                <td>{task.startTime}</td>\n                <td>{task.endTime}</td>\n                <td>{task.duration}</td>\n            </tr>\n        );\n\n        return (\n            <React.Fragment>\n                <TaskInput onTaskadded={(p) => this.taskAdded(p)}/>\n\n                <table className=\"table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Task</th>\n                            <th scope=\"col\">Start Time</th>\n                            <th scope=\"col\">End Time</th>\n                            <th scope=\"col\">Duration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { tasks }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n \nexport default TaskList;","import React from 'react';\nimport './App.css';\nimport TaskList from './components/TaskList';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}